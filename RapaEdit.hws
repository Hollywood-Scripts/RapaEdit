/*
**  RapaEdit
**
**  By Samuel D. Crow
*/
@VERSION 8,0

@REQUIRE "RapaGUI",{version=1,revision=2}

@FILE 1, "RapaEdit.xml"
@BRUSH 2, "icons/new.png", {LoadAlpha=True}
@BRUSH 3, "icons/open.png", {LoadAlpha=True}
@BRUSH 4, "icons/close.png", {LoadAlpha=True}
@BRUSH 5, "icons/save.png", {LoadAlpha=True}
@BRUSH 6, "icons/saveas.png", {LoadAlpha=True}
@BRUSH 7, "icons/add.png", {LoadAlpha=True}
@BRUSH 8, "icons/remove.png", {LoadAlpha=True}
@BRUSH 9, "icons/treeview.png", {LoadAlpha=True}
@BRUSH 10, "icons/moveup.png", {LoadAlpha=True}
@BRUSH 11, "icons/movedown.png", {LoadAlpha=True}
@BRUSH 12, "icons/ok.png", {LoadAlpha=True}
@BRUSH 13, "icons/cancel.png", {LoadAlpha=True}

;Import external classes
@INCLUDE "gadgets/application.hws"
@INCLUDE "gadgets/window.hws"
@INCLUDE "gadgets/dialog.hws"
@INCLUDE "gadgets/group.hws"
@INCLUDE "gadgets/button.hws"
@INCLUDE "gadgets/rectangle.hws"

/*****Global Variables*****/
Global prefixes={}
Global gadgetclasses={}
gadgetclasses["group"]=group
gadgetclasses["rectangle"]=rectangle
gadgetclasses["button"]=button
Global treeitems={}
/*****Global Functions*****/

Function p_Hierarchy(message, prefixLength)
	Local suffix=UnrightStr(message.id, prefixLength)
	DebugPrint(sufix)
	If (suffix="deselect") Then moai.Set("tree_hierarchy", "active", "off")
EndFunction

Function p_GadSelect(message, prefixLength)
	Local suffix=UnrightStr(message.id, prefixLength)
	DebugPrint(sufix)
EndFunction

/*
**	Clone Fields
**
**	Clone the non-method fields of a table only for save methods
*/
Function p_CloneFields(data)
	Local savebuf=CopyTable(data, True)
	; kill the invariant methods
	For k, v In Pairs(savebuf)
		If (#FUNCTION=GetType(v)) Then savebuf[k]=Nil
	Next
	savebuf["slot"]=Nil
	Return(savebuf)
EndFunction

/*
**	Get Type
**
**	Returns type name as a string and user data table
*/
Function p_GetType(current$)
	Local uid$=moai.Get(current$, "UID")
	Local ud=RawGet(treeitems, uid$)
	Assert(Not IsNil(ud))
	Assert(GetType(ud)=#TABLE)
	Return(ud.type["kind$"], ud)
EndFunction

/*
**	Add Gadget
*/
Function p_AddGadget()
	Local type$=moai.Get("tree_hierarchy", "Active")
	If (type$="off")
		moai.Request("No Destination", "No destination of where to add the gadget is selected", "OK", "Error")
		Return
	EndIf
	Local temp$, data=p_GetType(type$)
	Switch (temp$)
		Case "application":
			moai.Request("Application", "Applications can only hold windows and dialogs.", "OK", "Error")
			Return
		Default:
			Local current=moai.Get("lv_gadgets", "Active")
			If (GetType(current)=#STRING)
				moai.Request("No Gadget", "No selected gadget to add", "OK", "Error")
				Return
			EndIf
			Local class=RawGet(gadgetclasses, moai.DoMethod("lv_gadgets", "GetEntry", current))
			Assert(Not IsNil(class))
			Local parent$=moai.Get("tree_hierarchy", "Active")
			If (parent$="off")
				moai.Request("Unselected", "Nowhere to put gadget", "OK", "Error")
				Return
			EndIf
			Local parentTemp$, parentData = p_GetType(parent$)
			Local dest=parentData.type
			Assert(Not IsNil(dest))
			dest.AddGadget(parentData, class)
	EndSwitch
EndFunction

/*
**	Default BeRemoved method
*/
Function p_Remove(self)
	moai.DoMethod("tree_hierarchy", "Remove", TreeItems[self.ID$])
	TreeItems[self.ID$]=Nil
	self=Nil
EndFunction

/*
**	Remove Gadget
*/
Function p_RemGadget(msg, len)
	Local type$=moai.Get("tree_hierarchy", "Active")
	If (type$="off")
		moai.Request("Not Selected", "No gadget is selected to remove", "OK", "Error")
		Return
	EndIf
	Local temp$, data=p_GetType(type$)
	Switch (temp$)
		Case "application":
			moai.Request("Application", "Applications are closed using the close file option", "OK", "Information")
			Return
		Case "window":
			application.RemWindow(temp$, data)
		Case "dialog":
			application.RemWindow(temp$, data)
		Default:
			If data.parent.kind$="group"
				data.parent:rem_item(data)
			Else
				data:delete()
			EndIf
	EndSwitch	
EndFunction

/*
**	Start Editor
**
**	Starts editor function on selected gadget
*/
Function p_StartEditor()
	Local current$=moai.Get("tree_hierarchy", "Active")
	If (current$="off") Then Return
	Local temp$, data = p_GetType(current$)
	Local class=gadgetclasses[temp$]
	class.editor(data)
EndFunction

/*
**	Preview XML
*/
Function p_previewXML()
	Local xml$=application.GenerateXML$()
	moai.CreateDialog([[<dialog id="xml_dialog" width="800" height="600" title="XML Preview">
		<vgroup>
			<textview id="xml_preview"></textview>
			<hgroup>
				<rectangle />
				<button id="xml_export" >Export</button>
				<button id="xml_cancel" >Cancel</button>
			</hgroup>
		</vgroup>
	</dialog>]], "win")
	moai.Set("xml_preview", "Text", xml$)
	moai.DoMethod("xml_dialog", "showModal")
EndFunction

/*
**	Regular Preview
*/
Function p_preview()
	Local sel$=moai.Get("tree_hierarchy", "Active")
	If (sel$="off")
		moai.Request("Unselected", "No item selected", "OK", "Error")
		Return
	EndIf
	Local temp$, pnl=p_GetType(sel$)
	If temp$="application"
		moai.Request("Illegal",
			"Applications cannot be previewed.\nSelect a window or dialog.", "OK", "Error")
		Return
	EndIf
	DebugPrint(pnl.kind$.." of "..temp$)
	While pnl.kind$<>"dialog" And pnl.kind$<>"window"
		pnl=pnl.parent
		DebugPrint("parent is "..pnl.kind$)
	Wend
	Local xml$=pnl.previewXML$(pnl)
	DebugPrint(xml$)
	moai.Request("pause", "Waiting for you", "OK")
	moai.CreateDialog(xml$, "win")
	moai.DoMethod("pre_view", "showModal")
EndFunction

/*
**	Preview handler
*/
Function p_previewHandle(msg, len)
	moai.DoMethod("pre_view", "EndModal", 0)
EndFunction

/*
**	Save As...
*/
Function p_saveas()
	Local f$=FileRequest("Save As...", "rapa", #REQ_SAVEMODE)
	If f$="" Then Return
	If Exists(f$)
		If moai.Request("File Exists", 
			"Are you sure you want to overwrite "..f$.."?", "OK|Cancel", "Warning")=0
			Return
		EndIf
	EndIf
	application.saveas(f$)
EndFunction

/*
**	Unsaved
**
**	Returns true if there are unsaved applications
*/
Function p_unsaved()
	Local found, tbl=moai.DoMethod("tree_hierarchy", "GetEntry", "Root", "Head")
	While found
		Local u=tbl.UID
		Local app=treeitems[u].type[kind$]
		If app.saved=False Then Return(True)
		found, tbl=moai.DoMethod("tree_hierarachy", "GetEntry", u, "Next")
	Wend
	Return(False)
EndFunction

/*
** Process Menu and Toolbar events
*/
Function p_MenuToolBar(msg, len)
	Local prefix$=LeftStr(msg.id, len)
	Switch msg.attribute
		Case "Pressed":
			Assert(prefix$="tb_")
		Case "Selected":
			Assert(prefix$="mn_")
		Default:
			; Should be unreachable
			moai.Request("Error", "p_MenuToolbar is incorrect handler", "OK", "Error")
			End
	EndSwitch
	Local suffix$=UnrightStr(msg.id, len)
	DebugPrint(suffix$)
	Switch suffix$
		Case "quit":
			If p_unsaved() And moai.Request("Unsaved",
				"Document is unsaved!\nAre you sure you want to quit?",
				"OK|Cancel", "Warning")=0
				Return
			EndIf
			End
		Case "encapsulate":
			;TODO Replace this with actual Template functionality
			moai.Request("Template", "Encapsulate selected", "OK", "Information")
		Case "rapa":
			moai.DoMethod("RapaEdit", "AboutRapaGUI")
		Case "about":
			moai.Request("About", "RapaEdit\nBy Samuel D. Crow", "OK", "Information")
		Case "editgadget":
			p_StartEditor()
		Case "addgadget":
			p_AddGadget()
		Case "removegadget":
			p_RemGadget(msg, len)
		Case "new":
			application:new()
		Case "preview":
			p_preview()
		Case "export":
			p_previewXML()
		Case "open":
			application.load()
		Case "saveas":
			p_saveas()
		Case "save":
			Local f$=RawGet(application.getCurrent(), "filename$")
			If IsNil(f$) Or f$="" Then p_saveas() Else application.saveas(f$)
	EndSwitch
EndFunction

/*
**	Handler
**
**	Handles input from edit requester
*/
Function p_handler(message, prefixLength)
	Local suffix=UnrightStr(message.id, prefixLength)
	Assert(Not IsNil(ModalUserData))
	Assert(GetType(ModalUserData)=#TABLE)
	Local type=ModalUserData.type
	If message.attribute="Pressed"
		Switch(suffix) FallThrough
			Case "ok":
				type.CopyBack()
			Case "cancel":
				type.editorDone()
				ModalUserData=Nil
			Default:
				Break
		EndSwitch
	EndIf
EndFunction

/*
**	XML Preview handler
*/
Function p_XML(msg, prefixLength)
	Switch UnRightStr(msg.id, prefixLength)
		Case "export":
			Local filename$=FileRequest("XML Export", "xml", #REQ_SAVEMODE)
			If filename$<>""
				StringToFile(moai.Get("xml_preview", "Text"), filename$)
			EndIf
		Case "cancel":
			moai.DoMethod("xml_dialog", "EndModal", 0)
	EndSwitch
EndFunction

/*
**	Global Event Handler
*/
Function p_ProcessGUI(message)
	Switch message.action
		Case "RapaGUI":
			Local prefixLength=FindStr(message.id, "_")+1
			Assert(prefixLength>1)
			;Check for Local prefixes and event handlers
			Local prefix$=LeftStr(message.id, prefixLength)
			Local handler=RawGet(prefixes, prefix$)
			DebugPrint("prefix="..prefix$)
			;Invoke local event handler from class
			handler(message, prefixLength)
	EndSwitch
EndFunction

Function p_WindowWash()
	moai.Request("Window Type", "No application selected", "OK", "Error")
EndFunction

/*****Initialization*****/
moai.CreateApp(ReadString(1))

;populate gadget list and prefix registry
For i$,j In Pairs(gadgetclasses)
	moai.DoMethod("lv_gadgets", "Insert", "Sorted", i$)
	If (Not IsNil(RawGet(j, "handler")))
		prefixes[j["prefix$"]]=j.handler
	Else
		; Default to p_handler if no type-specific handler is specified
		prefixes[j["prefix$"]]=p_handler
	EndIf
Next

;not listed in gadget because each application is a new document
gadgetclasses["application"]=application
;also not listed because windows and dialogs can only be added to applications
gadgetclasses["window"]=window
gadgetclasses["dialog"]=dialog

;add global prefixes to registry
prefixes["win_"]=p_handler
prefixes["dlg_"]=p_handler
prefixes["app_"]=p_handler
prefixes["mn_"]=p_MenuToolBar
prefixes["tb_"]=p_MenuToolBar
prefixes["tree_"]=p_Hierarchy
prefixes["lv_"]=p_GadSelect
prefixes["wa_"]=application.AddWindow
prefixes["xml_"]=p_XML
prefixes["pre_"]=p_previewHandle

InstallEventHandler({RapaGUI=p_ProcessGUI})

/*****Event Loop*****/
Repeat
	WaitEvent
Forever

/*
**  RapaEdit
**
**  By Samuel D. Crow
*/
@VERSION 8,0

@REQUIRE "RapaGUI",{version=1,revision=2}

@FILE 1, "RapaEdit.xml"
@BRUSH 2, "icons/new.png", {LoadAlpha=True}
@BRUSH 3, "icons/open.png", {LoadAlpha=True}
@BRUSH 4, "icons/close.png", {LoadAlpha=True}
@BRUSH 5, "icons/save.png", {LoadAlpha=True}
@BRUSH 6, "icons/saveas.png", {LoadAlpha=True}
@BRUSH 7, "icons/add.png", {LoadAlpha=True}
@BRUSH 8, "icons/remove.png", {LoadAlpha=True}
@BRUSH 9, "icons/treeview.png", {LoadAlpha=True}
@BRUSH 10, "icons/moveup.png", {LoadAlpha=True}
@BRUSH 11, "icons/movedown.png", {LoadAlpha=True}
@BRUSH 12, "icons/ok.png", {LoadAlpha=True}
@BRUSH 13, "icons/cancel.png", {LoadAlpha=True}

;Import external classes
@INCLUDE "gadgets/application.hws"
@INCLUDE "gadgets/window.hws"
@INCLUDE "gadgets/group.hws"

/*****Global Variables*****/
Global prefixes={}
Global gadgetclasses={}
gadgetclasses["group"]=group
Global treeitems={}
/*****Global Functions*****/

Function p_Hierarchy(message, prefixLength)
	Local suffix=UnrightStr(message.id, prefixLength)
	DebugPrint(sufix)
EndFunction

Function p_GadSelect(message, prefixLength)
	Local suffix=UnrightStr(message.id, prefixLength)
	DebugPrint(sufix)
EndFunction
	
/*
**	Get Type
**
**	Returns type name as a string and user data table
*/
Function p_GetType(current$)
	Local uid$=moai.Get(current$, "UID")
	Local ud=RawGet(treeitems, uid$)
	Assert(Not IsNil(ud))
	Assert(GetType(ud)=#TABLE)
	Return(ud.type["kind$"], ud)
EndFunction

/*
**	Add Gadget
*/
Function p_AddGadget()
	Local type$=moai.Get("tree_hierarchy", "Active")
	If (type$="off")
		moai.Request("No Destination", "No destination of where to add the gadget is selected", "OK", "Error")
		Return
	EndIf
	Local temp$, data=p_GetType(type$)
	Switch (temp$)
		Case "application":
			moai.Request("Application", "Applications can only hold windows and dialogs.", "OK", "Error")
			Return
		Default:
			Local current=moai.Get("lv_gadgets", "Active")
			If (GetType(current)=#STRING)
				moai.Request("No Gadget", "No selected gadget to add", "OK", "Error")
				Return
			EndIf
			Local class=RawGet(gadgetclasses, moai.DoMethod("lv_gadgets", "GetEntry", current))
			Assert(Not IsNil(class))
			Local parent$=moai.Get("tree_hierarchy", "Active")
			If (parent$="off")
				moai.Request("Unselected", "Nowhere to put gadget", "OK", "Error")
				Return
			EndIf
			Local parentTemp$, parentData = p_GetType(parent$)
			Local dest=parentData.type
			Assert(Not IsNil(dest))
			dest.AddGadget(parentData, class)
	EndSwitch
EndFunction

/*
**	Start Editor
**
**	Starts editor function on selected gadget
*/
Function p_StartEditor()
	Local current$=moai.Get("tree_hierarchy", "Active")
	If (current$="off") Then Return
	Local temp$, data = p_GetType(current$)
	Local class=gadgetclasses[temp$]
	class.editor(data)
EndFunction

/*
** Process Menu and Toolbar events
*/
Function p_MenuToolBar(msg, len)
	Local prefix$=LeftStr(msg.id, len)
	Switch msg.attribute
		Case "Pressed":
			Assert(prefix$="tb_")
		Case "Selected":
			Assert(prefix="mn_")
		Default:
			; Should be unreachable
			moai.Request("Error", "p_MenuToolbar is incorrect handler", "OK", "Error")
			End
	EndSwitch
	Local suffix$=UnrightStr(msg.id, len)
	DebugPrint(suffix$)
	Switch suffix$
		Case "quit":
			;TODO Check for unsaved document
			End
		Case "encapsulate":
			;TODO Replace this with actual Template functionality
			moai.Request("Template", "Encapsulate selected", "OK", "Information")
		Case "rapa":
			moai.DoMethod("RapaEdit", "AboutRapaGUI")
		Case "about":
			moai.Request("About", "RapaEdit\nBy Samuel D. Crow", "OK", "Information")
		Case "editgadget":
			p_StartEditor()
		Case "addgadget":
			p_AddGadget()
		Case "new":
			application:new()
		Case "export":
			application.GenerateXML$()
	EndSwitch
EndFunction

/*
**	Handler
**
**	Handles input from edit requester
*/
Function p_handler(message, prefixLength)
	Local suffix=UnrightStr(message.id, prefixLength)
	Assert(Not IsNil(ModalUserData))
	Assert(GetType(ModalUserData)=#TABLE)
	Local type=ModalUserData.type
	If message.attribute="Pressed"
		Switch(suffix) FallThrough
			Case "ok":
				type.CopyBack()
			Case "cancel":
				type.editorDone()
			Default:
				Break;
		EndSwitch
	EndIf
	ModalUserData=Nil
EndFunction

/*
**	Global Event Handler
*/
Function p_ProcessGUI(message)
	Switch message.action
		Case "RapaGUI":
			Local prefixLength=FindStr(message.id, "_")+1
			Assert(prefixLength>1)
			;Check for Local prefixes and event handlers
			Local prefix$=LeftStr(message.id, prefixLength)
			Local handler=RawGet(prefixes, prefix$)
			DebugPrint("prefix="..prefix$)
			;Invoke local event handler from class
			handler(message, prefixLength)
	EndSwitch
EndFunction

Function p_WindowWash()
	moai.Request("Window Type", "No application selected", "OK", "Error")
EndFunction

/*****Initialization*****/
moai.CreateApp(ReadString(1))

;populate gadget list and prefix registry
For i$,j In Pairs(gadgetclasses)
	moai.DoMethod("lv_gadgets", "Insert", "Sorted", i$)
	If (Not IsNil(RawGet(j, "handler")))
		prefixes[j["prefix$"]]=j.handler
	Else
		prefixes[j["prefix$"]]=p_handler
	EndIf
Next

;not listed in gadget because each applicaiton is a new document
gadgetclasses["application"]=application
;also not listed because windows and dialogs can only be added to applications
gadgetclasses["window"]=window

;add global prefixes to registry
prefixes["win_"]=p_handler
prefixes["app_"]=p_handler
prefixes["mn_"]=p_MenuToolBar
prefixes["tb_"]=p_MenuToolBar
prefixes["tree_"]=p_Hierarchy
prefixes["lv_"]=p_GadSelect
prefixes["wa_"]=application.AddWindow
prefixes["wr_"]=application.RemWindow

InstallEventHandler({RapaGUI=p_ProcessGUI})

/*****Event Loop*****/
Repeat
	WaitEvent
Forever

/*
**  Window.hws
**
**  A window gadget type for RapaEdit
**
**  By Samuel D. Crow
*/
Global window={}
window["count"]=0
window["prefix$"]="wn_"
window["kind$"]="window"
window["edit$"]=[[<?xml version="1.0" encoding="iso-8859-1"?>
<dialog id="wn_req" title="window">
	<vgroup>
		<colgroup columns="2">
			<label>ID</label>
			<textentry id="wn_id" />
			<label>Title</label>
			<textentry id="wn_title" />
			<label>Width</label>
			<textentry id="wn_width" accept="1234567890" />
			<label>Height</label>
			<textentry id="wn_height" accept="1234567890" />
		</colgroup>
		<checkbox id="wn_size">Resizable</checkbox>
		<checkbox id="wn_drag">Draggable</checkbox>
		<checkbox id="wn_close">Closable</checkbox>
		<hgroup>
			<button id="wn_ok" icon="12">OK</button>
			<button id="wn_cancel" icon="13">Cancel</button>
		</hgroup>
	</vgroup>
</dialog>]]

window["define"]={}
window.define["width"]=800
window.define["height"]=600
window.define["resizable"]=True
window.define["closegadget"]=True
window.define["draggable"]=True
;window.define.contents must be Nil if empty
;parent, count and id defined by factory method

/*
**  Window Factory Method
**
**	Generates window defines and update static counter
**
**	Accepts parent application class
**
**  Returns initialized table of window data
*/
Function window:new(app)
	Local w=CopyTable(self.define)

	; add parent and type link
	w["parent"]=app
	w["application"]=app
	w["type"]=window
	w["kind$"]=window.kind$

	;enumerate count from static variable
	w["count"]=self.count
	self.count=w.count+1

	;set default id
	w["id$"]="win"..StrStr(w.count)
	w["title$"]=w.id$
	w["name$"]=w.id$

	Return(w)
EndFunction

/*
**	Window destructor method
**
**	Deletes window and all contents 
*/
Function window.define:delete()
	If (Not IsNil(RawGet(self, "contents"))) Then self.contents:delete()
	Local uid$=moai.Get(self.id$, "UID")
	treeitems[uid$]=Nil
	moai.DoMethod("tree_hierarchy", "Remove", self.id$)
	self=Nil
EndFunction

/*
**	Add Gadget
**
**	Adds a single group to the contents 
*/
Function window.addGadget(dest, type)
	If (IsNil(RawGet(dest, "contents"))) And type.kind$="group"
		Local data=type:new(dest)
		dest["contents"]=data
		type.beAdded(data)
		Return
	EndIf
	moai.Request("Need Group",
		"Window can only hold one group.", "OK", "Error")
EndFunction

/*
**	Remove Gadget
**
**	Removes group from contents
*/
Function window.remGadget(kind$, data)
	If IsNil(RawGet(data.parent, "contents")) Then Return
	If moai.Request("Deleting group", 
		"Do you really want to delete the group?\nAll contents will be deleted also.",
		"Yes|No", "Warning")>0
		data.parent.contents:delete()
		data.parent.contents=Nil
	EndIf
EndFunction

/*
**	Be Added
*/
Function window.beAdded(data)
	moai.DoMethod("tree_hierarchy", "InsertNode", data.id$,
		data.parent.id$, "tail", "window "..data.name$)
	moai.DoMethod("tree_hierarchy", "Open", data.id$)
	Local uid$=moai.Get(data.id$, "UID")
	treeitems[uid$]=data
EndFunction

/*
**  Editor Method
**
**  Creates a graphical requester for RapaGUI window parameters
**
**  Note: Don't call on window.define or it will change the default values
**      and those defaults won't be saved with the document.  Instead call
**      this method on local copies created by the window:new() factory.
*/
Function window.editor(data)
	;pass the data pointer to the static handler routine
	moai.CreateDialog(window.edit$, "win_")
	moai.Set("wn_id", "Text", data.name$)
	moai.Set("wn_title", "Text", data.title$)
	moai.Set("wn_width", "Text", data.width)
	moai.Set("wn_height", "Text", data.height)
	moai.Set("wn_size", "Selected", data.resizable)
	moai.Set("wn_drag", "Selected", data.draggable)
	moai.Set("wn_close", "Selected", data.closegadget)
	Global ModalUserData=data
	moai.DoMethod("wn_req", "ShowModal")
EndFunction

/*
**	CopyBack
**
**	Processes buffer when OK pressed
*/
Function window.CopyBack()
	ModalUserData.name$=moai.Get("wn_id", "Text")
	ModalUserData.title$=moai.Get("wn_title", "Text")
	ModalUserData.width=moai.Get("wn_width", "Text")
	ModalUserData.height=moai.Get("wn_height", "Text")
	ModalUserData.resizable=moai.Get("wn_size", "Selected")
	ModalUserData.draggable=moai.Get("wn_drag", "Selected")
	ModalUserData.closegadget=moai.Get("wn_close", "Selected")
	moai.Set(ModalUserData.id$, "Name", "window "..ModalUserData.name$)
EndFunction

/*
**	EditorDone Method
**
**	Called by handler method when OK or Cancel have been clicked
*/
Function window.editorDone()
	moai.DoMethod("wn_req", "EndModal", 0)
EndFunction

/*
**	Make Body
**
**	Helper function for generating preview XML and export XML
*/
Function window.define:makeBody$()
		Return("\" title=\""..self.title$.."\" width=\""..self.width..
		"\" height=\""..self.height.."\" dragbar=\""..
		IIf(self.draggable,"True","False").."\" closegadget=\""..
		IIf(self.closegadget,"True","False").."\" >\n")
EndFunction

/*
**	GenerateXML
**
**	Recursively generates XML output for this item and all itmes contained in it
*/
Function window.define:generateXML$()
	Local xml$="\t<window id=\""..self.id$..self:makeBody$()..
		IIf(IsNil(RawGet(self, "contents")), "", self.contents:generateXML$(2))..
		"\t</window>\n"
	Return(xml$)
EndFunction

/*
**	GenerateXML
**
**	Recursively generates XML output for this item and all itmes contained in it
*/
Function window.define:previewXML$()
	Local xml$="<dialog id=\"pre_view"..self:makeBody$().."<vgroup>\n"..
		IIf(IsNil(RawGet(self, "contents")), "", self.contents:previewXML$(0))..
		"<button id=\"pre_exit\">Exit Preview</button>\n</vgroup>\n</dialog>\n"
	Return(xml$)
EndFunction

/*
**	Save
**
**	Strip out invariants for saving buffer
*/
Function window.save(self, src)
	self.parent=Nil
	self.application=Nil
	self.type=Nil
	self.id$=Nil
	self.count=Nil
	If (Not IsNil(RawGet(self, "contents")))
		Local buf=p_CloneFields(self.contents)
		buf.type.save(buf)
		self.contents=buf
	EndIf
EndFunction

/*
**	Load
**
**	Add all missing invariant fields to load buffer
*/
Function window.load(self, myParent)
	self["count"]=window.count
	self["id$"]="win"..StrStr(self.count)
	window.count=window.count+1
	self["generatexml$"]=window.define.generatexml$
	self["makebody$"]=window.define.makeBody$
	self["previewxml$"]=window.define.previewxml$
	self["delete"]=window.define.delete
	self["parent"]=myParent
	self["application"]=myParent
	self["type"]=window
	window.beAdded(self)
	If Not IsNil(RawGet(self, "contents"))
		gadgetclasses[self.contents.kind$].load(self.contents, self)
	EndIf
EndFunction

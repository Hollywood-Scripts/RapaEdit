/*
**  buttons.hws
**
**  Class that defines button constructs in RapaGUI
**
**  By Samuel D. Crow
*/

button={}
button["prefix$"]="btn_"
button["kind$"]="button"
button["count"]=0
button["edit"]=[[<?xml version="1.0" encoding="iso-8859-1"?>
<dialog id="btn_req" title="button">
	<vgroup>
		<colgroup columns="2">
			<label>ID</label>
			<textentry id="btn_id" />
			<label>Text</label>
			<textentry id="btn_label" />
		</colgroup>
		<hgroup>
			<label>Toggle</label>
			<checkbox id="btn_toggle" />
			<rectangle />
		</hgroup>
		<hgroup>
			<label>Icon Position</label>
			<choice id="btn_iconleft">
				<item>Right</item>
				<item>Left</item>
			</choice>
		</hgroup>
		<hgroup>
			<label>Icon</label>
			<popfile id="btn_icon" />
		</hgroup>
		<hgroup>
			<button id="btn_ok" icon="12">OK</button>
			<button id="btn_cancel" icon="13">Cancel</button>
		</hgroup>
	</vgroup>
</dialog>]]

button["define"]={}
button.define["toggle"]=False
button.define["iconleft"]=True
button.define["icon$"]=""

/*
**  button Factory Method
**
**  Generates new button
**
**  Accepts parent class handle
**
**  Returns initialized table of an empty button
*/
Function button:new(parent)
	local b=CopyTable(self.define)

	;add parent and type links
	b["parent"]=parent
	b["application"]=parent.application
	b["type"]=button
	
	;set id$
	b["id$"]="btn"..Strstr(button.count)
	button.count=button.count+1
	
	;Set Label and locla ID to their default
	b["label$"]=b.id$
	b["name$"]=b.id$

	return(b)
EndFunction

/*
**	button Destructor method
**
**	Removes button
*/
Function button.define.delete(self)
	moai.DoMethod("tree_hierarchy", "remove", self.id$)
	self=Nil
EndFunction

/*
**	Add Gadget
**
**	Impossible to add gadget to leaf element
*/
Function button.addGadget(dest, type)
	moai.Request("Error","Impossible to add gadget to button", "OK", "Error")
EndFunction

/*
**	Be Added 
**
**	Add yourself to a parent gadget or window
*/
Function button.beAdded(data)
	moai.DoMethod("tree_hierarchy", "InsertLeaf", data.id$,
		data.parent.id$, "tail", "button "..data.label$)
	Local uid$=moai.Get(data.id$, "UID")
	treeitems[uid$]=data
EndFunction

/*
**  Editor Method
**
**  Creates a graphical requester indicating that buttons can't be edited
*/
Function button.editor(data)
	moai.CreateDialog(button.edit,"win")
	moai.Set("btn_label", "text", data.label$)
	moai.Set("btn_id", "text", data.name$)
	moai.Set("btn_toggle", "Selected", data.toggle)
	moai.Set("btn_icon", "File", data.icon$)
	moai.Set("btn_iconleft", "Active", IIf(data.iconleft, 1, 0))
	Global ModalUserData=data
	moai.DoMethod("btn_req", "ShowModal")
EndFunction

/*
**	Copy Back
**
**	Processes buffer when OK pressed
*/
Function button.CopyBack()
	Local current$=moai.Get("btn_id", "Text")
	ModalUserData.toggle=moai.Get("btn_toggle", "Selected")
	ModalUserData.label$=moai.Get("btn_label", "Text")
	ModalUserData.icon$=moai.Get("btn_icon", "File")
	Switch moai.Get("btn_iconleft", "Active")
		Case 0:
			ModalUserData.iconleft=False
		Case 1:
			ModalUserData.iconleft=True
		Default:
			;Should never happen
			Assert(false)
	EndSwitch
	If (StrLen(current$)>0)
		If (IsAlpha(LeftStr(current$, 1)))
			ModalUserData.name$=current$
			moai.DoMethod(ModalUserData.id$, "SetItem", 0, "button "..current$)
		Else
			moai.Request("ID", "ID must start with a letter", "OK", "Warning")
		EndIf
	EndIf
EndFunction

/*
**	Editor Done Function
**
**	Called by handler method when OK or Cancel has been clicked
*/
Function button.editorDone()
	moai.DoMethod("btn_req", "EndModal", 0)
EndFunction

/*
**	Generate XML
**
**	Generate XML code string for this recgangle
*/
Function button.define.generateXML$(indention)
	Local xml$
	xml$=RepeatStr("\t",indention).."<button id=\""..self.id$.."\" toggle=\""..
		IIf(self.toggle,"true","false").."\" "..
		IIf(self.icon$<>"", "icon=\""..self.icon$.."\" iconpos=\""..
			IIf(self.iconleft, "left", "right").."\" ", "")..
		" >\n"..RepeatStr("\t", indention+1)..self.label$..
		RepeatStr("\t", indention).."</button>\n"
	Return(xml$)
EndFunction

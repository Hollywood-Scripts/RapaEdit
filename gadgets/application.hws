/*
**  Application.hws
**
**  An application gadget class for RapaEdit
**
**  By Samuel D. Crow
*/

Global application={}
application["count"]=0
application["kind$"]="application"
Const #FILEVER=1

/*
**	Application factory method
*/
Function application:new()
	Local data={}
	data["id$"]="app"..StrStr(self.count)
	data["name$"]=data.id$
	self.count=self.count+1
	data["type"]=application
	data["application"]=data
	data["encoding"]="utf8"
	;Note:  Children of applications have a reserved item called "slot" that
	;	holds enumeration data for the parent application
	data["children"]=0
	data["saved"]=False
	self.beAdded(data)
EndFunction

/*
**	Be Added
*/
Function application.beAdded(data)
	moai.DoMethod("tree_hierarchy", "InsertNode", data.id$, "root", "tail", "application "..data.name$)
	moai.DoMethod("tree_hierarchy", "Open", data.id$)
	moai.Set("tree_hierarchy", "Active", data.id$)
	treeitems[moai.Get(data.id$, "UID")]=data
EndFunction

/*
**  Add Window
**
**  Add a window or dialog 
*/
Function application.AddWindow(msg, len)
	Local current$=moai.Get("tree_hierarchy", "Active")
	If (current$="off")
		p_WindowWash()
		Return
	EndIf
	Local temp$, data = p_GetType(current$)
	If (temp$<>"application")
		p_WindowWash()
		Return
	EndIf
	Local child
	Switch (UnrightStr(msg.id, len))
		Case "window":
			child=window:new(data)
		Case "dialog":
			child=dialog:new(data)
		Default:
			Return
	EndSwitch
	If (IsNil(RawGet(data, "contents"))) Then data["contents"]={}
	data.contents[data.children]=child
	child["slot"]=data.children
	data.children=data.children+1
	child.type.BeAdded(child)
EndFunction

/*
**	Remove Window 
**
**	Removes windows or dialog definitions
*/
Function application.RemWindow(msg, len)
	Local current$=moai.Get("tree_hierarchy", "Active")
	Local kind$=UnrightStr(msg.id, len)
	If (current$="off")
		moai.Request("Type", "No "..kind$.." selected", "OK", "Error")
		Return
	EndIf
	Local udtype$, ud=p_GetType(current$)
	If (udtype$<>kind$)
		moai.Request("Error", kind$.." expected but "..udtype$.." selected", "OK", "Error")
		Return
	EndIf
	Local r=moai.Request("Deleting "..kind$, "Deleting "..kind$.." named: "..ud.id$..
		"\nAll gadgets contained in it will be deleted also.", "OK|Cancel", "Warning")
	If (r>0)
		;shuffle down contents removing ud
		Local dad=ud.parent
		dad.children=dad.children-1
		If (ud.slot<>dad.children) Then dad.contents[ud.slot]=dad.contents[dad.children]
		dad.contents[dad.children]=Nil
		ud:delete()
	EndIf
EndFunction

/*
**	Editor
**
**	Allows name of application to be changed
*/
Function application.editor(data)
	Global ModalUserData=data
	moai.CreateDialog([[<?xml version="1.0" encoding="iso-8859-1"?>
		<dialog id="app_req" title="Application">
			<vgroup>
				<radio id="app_encode" title="Encoding">
					<item>UTF8</item>
					<item>ISO-8859-1</item>
				</radio>
				<textentry id="app_name" />
				<hgroup>
					<button id="app_ok" icon="12" >OK</button>
					<button id="app_cancel" icon="13" >Cancel</button>
				</hgroup>
			</vgroup>
		</dialog>
	]], "win")
	moai.Set("app_encode", "Active", IIf(data.encoding="utf8",0,1))
	moai.Set("app_name", "text", data.name$)
	moai.DoMethod("app_req", "ShowModal")
EndFunction

/*
**	Copy Back
**
**	OK Pressed so copy back from the dialog
*/
Function application.CopyBack()
	ModalUserData.name$=moai.Get("app_name", "text")
	ModalUserData.encoding=IIF(moai.Get("app_encode", "Active")=1, "iso-8859-1", "utf8")
	moai.Set(ModalUserData.id$, "Name", "application "..ModalUserData.name$)
EndFunction

/*
**	EditorDone
**
**	Finish up requester
*/
Function application.editorDone()
	moai.DoMethod("app_req", "EndModal", 0)
EndFunction

/*
**	Generate XML
**
**	Returns the XML representation of the current application or Nil if error found
*/
Function application.GenerateXML$()
	Local data=application.getCurrent()
	If IsNil(data) Then Return(Nil)
	Local XML$="<?xml version=\"1.0\" encoding=\""..data.encoding.."\"?>\n"..
		"<application id=\""..data.name$.."\">\n"
	If (IsNil(RawGet(data, "contents"))) Then Return (XML$.."</application>\n")
	For x, y In IPairs(data.contents)
		XML$=XML$..y:GenerateXML$()
	Next
	XML$=XML$.."</application>\n"
	Return(XML$)
EndFunction

/*
**	Get Current
**
**	Gets the current application document or Nil if there isn't one selected
*/
Function application.getCurrent()
	Local tree$=moai.Get("tree_hierarchy", "Active")
	If (tree$="off")
		moai.Request("Unselected", "No Application is selected", "OK", "Error")
		Return(Nil)
	EndIf
	Local temp$, temp2=p_GetType(tree$)
	assert(Not IsNil(temp2))
	Local data=temp2.application
	assert(Not IsNil(data))
	Return(data)
EndFunction

/*
**	Save As
**
**	Saves stripped version of the current application table to a file
*/
Function application.saveas(filename$)
	Local data=application.getCurrent()
	If IsNil(data) Or IsNil(RawGet(data, "contents"))
		moai.Request("Empty Document", "Nothing to save", "OK", "Error")
		Return
	EndIf
	data["filename$"]=filename$
	Local savebuf=CopyTable(data, True)
	savebuf.type=Nil
	savebuf.saved=Nil
	savebuf.children=Nil
	savebuf.application=Nil
	savebuf.id$=Nil
	savebuf.count=Nil
	For k, v In Pairs(data.contents)
		Local buf=copyTable(v, True)
		buf.type.save(buf)
		savebuf.contents[k]=buf
	Next
	Local outfile=OpenFile(Nil, filename$, #MODE_WRITE)
	; write cookie to indicate file type
	WriteString(outfile, "RapaEdit", 8, #ENCODING_ISO8859_1)
	; write format version
	WriteInt(outfile, #FILEVER)
	; write contents
	WriteTable(outfile, savebuf)
	CloseFile(outfile)
	data.saved=True
EndFunction

/*
**	Load
**
**	Load a saved file
*/
Function application.load()
	Local filename$=FileRequest("", "rapa")
	If filename$="" Then Return
	Local infile=OpenFile(Nil, filename$, #MODE_READ)
	; check file type cookie
	If ReadString(infile, 8, #ENCODING_ISO8859_1)<>"RapaEdit"
		moai.Request("Corrupt", "Filetype not recognized", "OK", "Error")
		Return(Nil)
	EndIf
	; check version number
	If ReadInt(infile)>#FILEVER
		moai.Request("Version", "File version is too new\nfor this version of RapaEdit",
			"OK", "Error")
		Return(Nil)
	EndIf
	; load actual data
	Local loadbuf=ReadTable(infile)
	; initialize missing fields
	loadbuf["count"]=application.count
	loadbuf["id$"]="app"..StrStr(loadbuf.count)
	application.count=application.count+1
	loadbuf["type"]=application
	loadbuf["saved"]=True
	loadbuf["application"]=loadbuf
	loadbuf["children"]=0
	application.beAdded(loadbuf)
	For k, v In IPairs(loadbuf.contents)
		gadgetclasses[v.kind$].load(v, loadbuf)
		loadbuf.children=loadbuf.children+1
	Next
EndFunction

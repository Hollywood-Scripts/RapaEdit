/*
**  Groups.hws
**
**  Class that defines group constructs in RapaGUI
**
**  By Samuel D. Crow
*/

group={}
group["count"]=0
group["prefix$"]="grp_"
group["kind$"]="group"
group["edit$"]=[[<?xml version="1.0" encoding="iso-8859-1"?>
<dialog id="grp_req" title="group">
	<vgroup>
		<radio id="grp_kind">
			<item>Vertical</item>
			<item>Horizontal</item>
			<item>Column</item>
			<item>Scrolling</item>
		</radio>
		<colgroup columns="2">
			<label>ID</label>
			<textentry id="grp_id" reject="0123456789" />
			<label>Title</label>
			<textentry id="grp_title" />
			<label>Columns</label>
			<textentry id="grp_columns" accept="0123456789" />
			<label>Horizontal Alignment</label>
			<choice id="grp_halign">
				<item>Default</item>
				<item>Left</item>
				<item>Center</item>
				<item>Right</item>
			</choice>
			<label>Vertical Alignment</label>
			<choice id="grp_valign">
				<item>Default</item>
				<item>Top</item>
				<item>Center</item>
				<item>Bottom</item>
			</choice>
			<label>Frame Title</label>
			<textentry id="grp_frametitle" />
		</colgroup>
		<checkbox id="grp_frame">Framed</checkbox>
		<checkbox id="grp_same">Uniform Spacing</checkbox>
		<popcolor id="grp_color" title="Color" />
		<hgroup>
			<button id="grp_ok" icon="12">OK</button>
			<button id="grp_cancel" icon="13">Cancel</button>
		</hgroup>
	</vgroup>
</dialog>]]

group["define"]={}
group.define["kind"]=0
group.define["subitems"]=0
group.define["same"]=False
group.define["frame"]=False
group.define["frametitle$"]=""
group.define["color"]=0
group.define["title$"]=""
group.define["columns"]=2
group.define["halign"]=0
group.define["valign"]=0
group.define["children"]=0
/*
**	Note:  Children of a group have a reserved item called "slot" that holds
**		position data for the parent group
*/

/*
**  Group Factory Method
**
**  Generates new group
**
**  Accepts parent class handle
**
**  Returns initialized table of an empty group
*/
Function group:new(parent)
	local g=CopyTable(self.define)

	;add parent and type links
	g["parent"]=parent
	g["application"]=parent.application
	g["type"]=group

	;enumerate count
	g["count"]=self.count
	self.count=self.count+1

	;set default ID
	g["id$"]="grp"..StrStr(g.count)
	g["name$"]=g.id$

	return(g)
EndFunction

/*
**	Group Destructor method
**
**	Removes group and all contents
*/
Function group.define:delete()
	Local nested=RawGet(self, contents)
	If (Not IsNil(nested))
		For x In nested Do x:delete()
	EndIf
	moai.DoMethod("tree_hierarchy", "remove", self.id$)
	self=Nil
EndFunction

/*
**	Add Gadget
**
**	Adds a single gadget to the contents 
*/
Function group.addGadget(dest, type)
	Local data=type:new(dest)
	;type.editor(data)
	If (IsNil(RawGet(dest, contents))) Then dest["contents"]={}
	dest.contents[dest.children]=data
	data["slot"]=dest.children
	dest.children=dest.children+1
	type.beAdded(data)
EndFunction

/*
**	Be Added 
**
**	Add yourself to a parent gadget or window
*/
Function group.beAdded(data)
	moai.DoMethod("tree_hierarchy", "InsertNode", data.id$,
		data.parent.id$, "tail", "vgroup "..data.name$)
	moai.DoMethod("tree_hierarchy", "Open", data.id$)
	Local uid$=moai.Get(data.id$, "UID")
	treeitems[uid$]=data
EndFunction

function group.define:header$()
	Switch (self.kind)
		Case 0:
			Return("vgroup ")
		Case 1:
			Return("hgroup ")
		Case 2:
			Return("colgroup ")
		Case 3:
			Return("scrollgroup ")
	EndSwitch
EndFunction

/*
**  Editor Method
**
**  Creates a graphical requester for RapaGUI group parameters
*/
Function group.editor(data)
	moai.CreateDialog(group.edit$, "win")
	moai.Set("grp_kind", "Active", data.kind)
	moai.Set("grp_columns", "Text", data.columns)
	moai.Set("grp_title", "Text", data.title$)
	moai.Set("grp_frametitle", "Text", data.frametitle$)
	moai.Set("grp_frame", "Selected", data.frame)
	moai.Set("grp_same", "Selected", data.same)
	moai.Set("grp_color", "RGB", data.color)
	moai.Set("grp_id", "Text", data.name$)
	moai.Set("grp_halign", "Active", data.halign)
	moai.Set("grp_valign", "Active", data.valign)
	Global ModalUserData=data
	moai.DoMethod("grp_req", "ShowModal")
EndFunction

/*
**	Copy Back
**
**	Copy data back from requestor when OK selected
*/
Function group.CopyBack()
	ModalUserData.kind=moai.Get("grp_kind", "Active")
	ModalUserData.columns=moai.Get("grp_columns", "Text")
	ModalUserData.title$=moai.Get("grp_title", "Text")
	ModalUserData.frametitle$=moai.Get("grp_frametitle", "Text")
	ModalUserData.frame=moai.Get("grp_frame", "Selected")
	ModalUserData.same=moai.Get("grp_same", "Selected")
	ModalUserData.color=moai.Get("grp_color", "RGB")
	ModalUserData.name$=moai.Get("grp_id", "Text")
	ModalUserData.halign=moai.Get("grp_halign", "Active")
	ModalUserData.valign=moai.Get("grp_valign", "Active")
	moai.Set(ModalUserData.id$,
		"Name", ModalUserData:header$()..ModalUserData.name$)
	If (ModalUserData.Title$<>"")
		Local Active$=moai.Get("tree_hierarchy", "Active")
		moai.DoMethod(Active$, "SetItem", 0,
			ModalUserData:Header$()..ModalUserData.Title$)
	EndIf
EndFunction

/*
**	Editor Done Function
**
**	Closes the Requester and cleans up
*/
Function group.editorDone()
	moai.DoMethod("grp_req", "EndModal", 0)
EndFunction

/*
**	Generate XML
**
**	Generates XML code for group and all gadgets in it
*/
Function group.define.GenerateXML$(indention)
	Local xml$
	xml$=RepeatStr("\t",indention).."<"..self:header$()..
		IIf(self.title$<>""," title=\""..self.title$.."\"","")..
		IIf(self.frame," frame=\"true\""..
			IIf(self.frametitle<>"", " frametitle=\"..self.frametitle..\"", ""), "")..
		IIf(self.same, "same=\"true\"", "")..
		" color=\""..self.color.."\" id=\""..self.id$.."\""..
		IIf(self.kind=2, " columns=\""..self.columns.."\"", "")
	Switch self.halign
		Case 1:
			xml$=xml$.." halign=\"left\""
		Case 2:
			xml$=xml$.." halign=\"center\""
		Case 3:
			xml$=xml$.." halign=\"right\""
	EndSwitch
	Switch self.valign
		Case 1:
			xml$=xml$.." valign=\"top\""
		Case 2:
			xml$=xml$.." valign=\"center\""
		Case 3:
			xml$=xml$.." valign=\"bottom\""
	EndSwitch
	xml$=xml$..">\n"
	For y,x In IPairs(self.contents) Do xml$=xml$..x.generateXML$(indention+1)
	xml$=xml$..RepeatStr("\t", indention).."</"..self.header$()..">\n"
	Return(xml$)
EndFunction

